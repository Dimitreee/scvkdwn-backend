"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var path = require('path');

var _require = require('.'),
    isAcceptedNodeVersion = _require.isAcceptedNodeVersion,
    writePackageJSON = _require.writePackageJSON,
    writeBabelRC = _require.writeBabelRC,
    writeMochaOpts = _require.writeMochaOpts,
    installDeps = _require.installDeps;

var globby = require('globby');

if (!isAcceptedNodeVersion()) {
  throw new Error("Babel 7 will only support Node 4 and higher");
}

function hasFlow() {
  return _hasFlow.apply(this, arguments);
}

function _hasFlow() {
  _hasFlow = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var flowConfigs;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return globby(['**/.flowconfig', '!**/node_modules/**']);

          case 2:
            flowConfigs = _context2.sent;
            return _context2.abrupt("return", flowConfigs.length > 0);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _hasFlow.apply(this, arguments);
}

function parseOptions(args, availableOptions) {
  return Object.entries(availableOptions).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        option = _ref2[0],
        flags = _ref2[1];

    return {
      [option]: args.some(function (arg) {
        return flags.includes(arg);
      })
    };
  }).reduce(function (options, option) {
    return Object.assign(options, option);
  }, {});
} // TODO: allow passing a specific path


_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee() {
  var paths, packages, mochaOpts, flow, cliOptions, upgradeOptions;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return globby(['**/.babelrc', '!**/node_modules/**']);

        case 2:
          paths = _context.sent;
          _context.next = 5;
          return globby(['**/package.json', '!**/node_modules/**']);

        case 5:
          packages = _context.sent;
          _context.next = 8;
          return globby(['**/mocha.opts', '!**/node_modules/**']);

        case 8:
          mochaOpts = _context.sent;
          _context.next = 11;
          return hasFlow();

        case 11:
          flow = _context.sent;
          cliOptions = parseOptions(process.argv, {
            installDeps: ['--install'],
            write: ['--write', '-w']
          });
          upgradeOptions = {
            hasFlow: flow,
            write: cliOptions.write
          }; // if not a monorepo

          if (packages.length === 1) {
            if (paths.length > 1) {
              console.log("We suggest using the new 'overrides' option instead of nested .babelrc's, can check out http://new.babeljs.io/docs/en/next/babelrc.html#overrides");
              console.log("");
            }

            paths.forEach(function (p) {
              return writeBabelRC(p, upgradeOptions);
            });
          }

          mochaOpts.forEach(function (p) {
            return writeMochaOpts(p, upgradeOptions);
          }); // TODO: allow passing a specific path

          _context.next = 18;
          return writePackageJSON(upgradeOptions);

        case 18:
          if (!cliOptions.installDeps) {
            _context.next = 26;
            break;
          }

          if (!cliOptions.write) {
            _context.next = 25;
            break;
          }

          console.log('Installing new dependencies');
          _context.next = 23;
          return installDeps();

        case 23:
          _context.next = 26;
          break;

        case 25:
          console.log('Run babel-upgrade with --write (or) -w and --install for it to install the newly added dependencies');

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}))();